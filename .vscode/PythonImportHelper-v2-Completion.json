[
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "check_file",
        "kind": 2,
        "importPath": "Errors vs Exceptions.else_finally_raise",
        "description": "Errors vs Exceptions.else_finally_raise",
        "peekOfCode": "def check_file(filename):\n    if filename == \"\":\n        raise FileNotFoundError(\"file not found\")\n    if not filename.endswith('.txt'):\n        raise  (\"only .txt files are allowed\")\n    print(\"file correct\")\ntry:    \n    check_file('data.csv')\nexcept Exception as e:# e = ValueError(\"only .txt files are allowed\") \n    print(\"exception 1\",e)",
        "detail": "Errors vs Exceptions.else_finally_raise",
        "documentation": {}
    },
    {
        "label": "file_path",
        "kind": 5,
        "importPath": "File.file_handling",
        "description": "File.file_handling",
        "peekOfCode": "file_path = pathlib.Path('File/name.txt')\nif file_path.exists():\n    print(\"File exists\")\nprint(os.path.abspath('File/name.txt'))\nprint(os.path.getsize('File/name.txt'))\nwith open('File/name.txt','r') as f:\n    print(f.read(18))\n    print(f.tell())",
        "detail": "File.file_handling",
        "documentation": {}
    },
    {
        "label": "lines",
        "kind": 5,
        "importPath": "File.writefile",
        "description": "File.writefile",
        "peekOfCode": "lines = ['\\n i love python\\n','i am new to python\\n']\nwith open('File/name.txt','a') as f:\n    f.writelines(lines)",
        "detail": "File.writefile",
        "documentation": {}
    },
    {
        "label": "print_my_name",
        "kind": 2,
        "importPath": "Function.default_parameter",
        "description": "Function.default_parameter",
        "peekOfCode": "def print_my_name(f_name,l_name=\"khan\"):\n    print(f_name,l_name)\nprint_my_name(\"shimul\")\nprint_my_name(\"Shahadat\",\"Hossain\") #Hossain override khan\ndef greetings():\n    pass",
        "detail": "Function.default_parameter",
        "documentation": {}
    },
    {
        "label": "greetings",
        "kind": 2,
        "importPath": "Function.default_parameter",
        "description": "Function.default_parameter",
        "peekOfCode": "def greetings():\n    pass",
        "detail": "Function.default_parameter",
        "documentation": {}
    },
    {
        "label": "generate_multiplication_table",
        "kind": 2,
        "importPath": "Function.function",
        "description": "Function.function",
        "peekOfCode": "def generate_multiplication_table(n):\n    print(n,\"x 1 =\",n*1)\n    print(n,\"x 1 =\",n*2)\n    print(n,\"x 1 =\",n*3)\n    print(n,\"x 1 =\",n*4)\n    print(n,\"x 1 =\",n*5)\n    print(n,\"x 1 =\",n*6)\n    print(n,\"x 1 =\",n*7)\n    print(n,\"x 1 =\",n*8)\n    print(n,\"x 1 =\",n*9)",
        "detail": "Function.function",
        "documentation": {}
    },
    {
        "label": "my_function",
        "kind": 2,
        "importPath": "Function.keyword_function",
        "description": "Function.keyword_function",
        "peekOfCode": "def my_function(**data):\n    print(data)\n    print(f\"My name is  {data['f_name']} {data['l_name']}.I am {data['age']} years old. I Got {data['marks']} marks in programming. I live in {data['address']}\")\nmy_function(f_name=\"Shimul\",l_name=\"khan\",age=28,marks = 95, address=\"Dhaka\")",
        "detail": "Function.keyword_function",
        "documentation": {}
    },
    {
        "label": "my_function(f_name=\"Shimul\",l_name=\"khan\",age=28,marks",
        "kind": 5,
        "importPath": "Function.keyword_function",
        "description": "Function.keyword_function",
        "peekOfCode": "my_function(f_name=\"Shimul\",l_name=\"khan\",age=28,marks = 95, address=\"Dhaka\")",
        "detail": "Function.keyword_function",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "Function.lamda_function",
        "description": "Function.lamda_function",
        "peekOfCode": "students =  [('abir',94,50),('shimul',85,25),('jahir',95,20)]\nstudents_results = sorted(students,key= lambda x : x[2],reverse=True)\nprint(students_results)\nstudents_results = sorted(students,key= lambda x : x[1])\nprint(students_results)",
        "detail": "Function.lamda_function",
        "documentation": {}
    },
    {
        "label": "students_results",
        "kind": 5,
        "importPath": "Function.lamda_function",
        "description": "Function.lamda_function",
        "peekOfCode": "students_results = sorted(students,key= lambda x : x[2],reverse=True)\nprint(students_results)\nstudents_results = sorted(students,key= lambda x : x[1])\nprint(students_results)",
        "detail": "Function.lamda_function",
        "documentation": {}
    },
    {
        "label": "students_results",
        "kind": 5,
        "importPath": "Function.lamda_function",
        "description": "Function.lamda_function",
        "peekOfCode": "students_results = sorted(students,key= lambda x : x[1])\nprint(students_results)",
        "detail": "Function.lamda_function",
        "documentation": {}
    },
    {
        "label": "Today",
        "kind": 5,
        "importPath": "Function.library_func",
        "description": "Function.library_func",
        "peekOfCode": "Today = datetime.datetime.today()\nprint(Today)",
        "detail": "Function.library_func",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "Function.map_filter_reduce",
        "description": "Function.map_filter_reduce",
        "peekOfCode": "nums = [1,2,3,4]\nresult = list(map(lambda x: x*x,nums))\nprint(result)\n#filter\nnums = [1,2,3,4,5]\neven = list(filter(lambda x: x>2,nums))\nprint(even)\n#reduce\nimport functools\nsum = functools.reduce(lambda x,y : x+y,nums)",
        "detail": "Function.map_filter_reduce",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Function.map_filter_reduce",
        "description": "Function.map_filter_reduce",
        "peekOfCode": "result = list(map(lambda x: x*x,nums))\nprint(result)\n#filter\nnums = [1,2,3,4,5]\neven = list(filter(lambda x: x>2,nums))\nprint(even)\n#reduce\nimport functools\nsum = functools.reduce(lambda x,y : x+y,nums)\nprint(sum)",
        "detail": "Function.map_filter_reduce",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "Function.map_filter_reduce",
        "description": "Function.map_filter_reduce",
        "peekOfCode": "nums = [1,2,3,4,5]\neven = list(filter(lambda x: x>2,nums))\nprint(even)\n#reduce\nimport functools\nsum = functools.reduce(lambda x,y : x+y,nums)\nprint(sum)",
        "detail": "Function.map_filter_reduce",
        "documentation": {}
    },
    {
        "label": "even",
        "kind": 5,
        "importPath": "Function.map_filter_reduce",
        "description": "Function.map_filter_reduce",
        "peekOfCode": "even = list(filter(lambda x: x>2,nums))\nprint(even)\n#reduce\nimport functools\nsum = functools.reduce(lambda x,y : x+y,nums)\nprint(sum)",
        "detail": "Function.map_filter_reduce",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 5,
        "importPath": "Function.map_filter_reduce",
        "description": "Function.map_filter_reduce",
        "peekOfCode": "sum = functools.reduce(lambda x,y : x+y,nums)\nprint(sum)",
        "detail": "Function.map_filter_reduce",
        "documentation": {}
    },
    {
        "label": "addition",
        "kind": 2,
        "importPath": "Function.Multiple_arguments",
        "description": "Function.Multiple_arguments",
        "peekOfCode": "def addition(a,b):\n    result = a+b\n    return result\nr = addition(15,20)\nprint(r)\n#type 2\ndef addition_multiple_arguments(*args):\n    return sum(args)\nresult= addition_multiple_arguments(10,20,50,30,25,25,30)\nprint(result)",
        "detail": "Function.Multiple_arguments",
        "documentation": {}
    },
    {
        "label": "addition_multiple_arguments",
        "kind": 2,
        "importPath": "Function.Multiple_arguments",
        "description": "Function.Multiple_arguments",
        "peekOfCode": "def addition_multiple_arguments(*args):\n    return sum(args)\nresult= addition_multiple_arguments(10,20,50,30,25,25,30)\nprint(result)",
        "detail": "Function.Multiple_arguments",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "Function.Multiple_arguments",
        "description": "Function.Multiple_arguments",
        "peekOfCode": "r = addition(15,20)\nprint(r)\n#type 2\ndef addition_multiple_arguments(*args):\n    return sum(args)\nresult= addition_multiple_arguments(10,20,50,30,25,25,30)\nprint(result)",
        "detail": "Function.Multiple_arguments",
        "documentation": {}
    },
    {
        "label": "my_first_function",
        "kind": 2,
        "importPath": "Function.user_define_function",
        "description": "Function.user_define_function",
        "peekOfCode": "def my_first_function():#function definition\n    a = 10\n    b = 10\n    print(a+b)\nmy_first_function()# function call\n#type 2\n#input , no return\ndef add_two_numbers(a,b): # arguments\n    print(a+b)\nadd_two_numbers(10,20) #parameter",
        "detail": "Function.user_define_function",
        "documentation": {}
    },
    {
        "label": "add_two_numbers",
        "kind": 2,
        "importPath": "Function.user_define_function",
        "description": "Function.user_define_function",
        "peekOfCode": "def add_two_numbers(a,b): # arguments\n    print(a+b)\nadd_two_numbers(10,20) #parameter\nadd_two_numbers(100,200)\n#input,return\ndef multiply_two_numbers(a,b):\n    return a*b\nresult = multiply_two_numbers(10,20)\nprint(result)\n#no input, return",
        "detail": "Function.user_define_function",
        "documentation": {}
    },
    {
        "label": "multiply_two_numbers",
        "kind": 2,
        "importPath": "Function.user_define_function",
        "description": "Function.user_define_function",
        "peekOfCode": "def multiply_two_numbers(a,b):\n    return a*b\nresult = multiply_two_numbers(10,20)\nprint(result)\n#no input, return\ndef hello():\n    return \"Hello\"\nget = hello()\nprint(get)",
        "detail": "Function.user_define_function",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "Function.user_define_function",
        "description": "Function.user_define_function",
        "peekOfCode": "def hello():\n    return \"Hello\"\nget = hello()\nprint(get)",
        "detail": "Function.user_define_function",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Function.user_define_function",
        "description": "Function.user_define_function",
        "peekOfCode": "result = multiply_two_numbers(10,20)\nprint(result)\n#no input, return\ndef hello():\n    return \"Hello\"\nget = hello()\nprint(get)",
        "detail": "Function.user_define_function",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 5,
        "importPath": "Function.user_define_function",
        "description": "Function.user_define_function",
        "peekOfCode": "get = hello()\nprint(get)",
        "detail": "Function.user_define_function",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "Fundamental.area",
        "description": "Fundamental.area",
        "peekOfCode": "base = float(input(\"Enter base: \"))\nheight = float(input(\"Enter height: \"))\nradius = float(input(\"Enter radius: \"))\nTriangle_area = 0.5 * base * height\nCircle_area = 3.1416 * radius * radius\nprint(\"Area of Triangle :\", Triangle_area)\nprint(\"Area of Circle\", Circle_area)",
        "detail": "Fundamental.area",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "Fundamental.area",
        "description": "Fundamental.area",
        "peekOfCode": "height = float(input(\"Enter height: \"))\nradius = float(input(\"Enter radius: \"))\nTriangle_area = 0.5 * base * height\nCircle_area = 3.1416 * radius * radius\nprint(\"Area of Triangle :\", Triangle_area)\nprint(\"Area of Circle\", Circle_area)",
        "detail": "Fundamental.area",
        "documentation": {}
    },
    {
        "label": "radius",
        "kind": 5,
        "importPath": "Fundamental.area",
        "description": "Fundamental.area",
        "peekOfCode": "radius = float(input(\"Enter radius: \"))\nTriangle_area = 0.5 * base * height\nCircle_area = 3.1416 * radius * radius\nprint(\"Area of Triangle :\", Triangle_area)\nprint(\"Area of Circle\", Circle_area)",
        "detail": "Fundamental.area",
        "documentation": {}
    },
    {
        "label": "Triangle_area",
        "kind": 5,
        "importPath": "Fundamental.area",
        "description": "Fundamental.area",
        "peekOfCode": "Triangle_area = 0.5 * base * height\nCircle_area = 3.1416 * radius * radius\nprint(\"Area of Triangle :\", Triangle_area)\nprint(\"Area of Circle\", Circle_area)",
        "detail": "Fundamental.area",
        "documentation": {}
    },
    {
        "label": "Circle_area",
        "kind": 5,
        "importPath": "Fundamental.area",
        "description": "Fundamental.area",
        "peekOfCode": "Circle_area = 3.1416 * radius * radius\nprint(\"Area of Triangle :\", Triangle_area)\nprint(\"Area of Circle\", Circle_area)",
        "detail": "Fundamental.area",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Fundamental.data-type",
        "description": "Fundamental.data-type",
        "peekOfCode": "x = 5\ny = 6.6\nz = \"sabil\"\nn1=6\nn2=2\nn3=n1**n2\nprint(n3)\nn1=4\nprint(n3)\nn3=n1**n2",
        "detail": "Fundamental.data-type",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Fundamental.data-type",
        "description": "Fundamental.data-type",
        "peekOfCode": "y = 6.6\nz = \"sabil\"\nn1=6\nn2=2\nn3=n1**n2\nprint(n3)\nn1=4\nprint(n3)\nn3=n1**n2\nprint(n3)",
        "detail": "Fundamental.data-type",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "Fundamental.data-type",
        "description": "Fundamental.data-type",
        "peekOfCode": "z = \"sabil\"\nn1=6\nn2=2\nn3=n1**n2\nprint(n3)\nn1=4\nprint(n3)\nn3=n1**n2\nprint(n3)\nprint(x)",
        "detail": "Fundamental.data-type",
        "documentation": {}
    },
    {
        "label": "num_to_words",
        "kind": 5,
        "importPath": "Fundamental.dictionary",
        "description": "Fundamental.dictionary",
        "peekOfCode": "num_to_words = dict()\nnum_to_words[1]= 'one'\nnum_to_words[2]= 'two'\nnum_to_words[3]= 'three'\nprint(num_to_words,type(num_to_words))\nnum_to_words = {1: 'one', 2: 'two', 3: 'three'}\nfruits={'S':'Shimul','K':'Keya'}\nprint(fruits.get('K'))\nnum_to_words[4]='four'\nprint(num_to_words)",
        "detail": "Fundamental.dictionary",
        "documentation": {}
    },
    {
        "label": "num_to_words",
        "kind": 5,
        "importPath": "Fundamental.dictionary",
        "description": "Fundamental.dictionary",
        "peekOfCode": "num_to_words = {1: 'one', 2: 'two', 3: 'three'}\nfruits={'S':'Shimul','K':'Keya'}\nprint(fruits.get('K'))\nnum_to_words[4]='four'\nprint(num_to_words)\nprint(num_to_words[3])\nif 5 in num_to_words:\n    print(\"Available\")\nelse:\n    print(\"Not Found \")",
        "detail": "Fundamental.dictionary",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Fundamental.dictionary",
        "description": "Fundamental.dictionary",
        "peekOfCode": "a = [1,2,3]\nb = [\"Mango\",\"Banana\",\"Apple\"]\n# {1:\"Mango\",2:\"Banana\",3:\"Apple\"}\nprint(list(zip(a,b)))\nc = dict(zip(a,b))\nprint(c)\nprint(c[1])",
        "detail": "Fundamental.dictionary",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Fundamental.dictionary",
        "description": "Fundamental.dictionary",
        "peekOfCode": "b = [\"Mango\",\"Banana\",\"Apple\"]\n# {1:\"Mango\",2:\"Banana\",3:\"Apple\"}\nprint(list(zip(a,b)))\nc = dict(zip(a,b))\nprint(c)\nprint(c[1])",
        "detail": "Fundamental.dictionary",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "Fundamental.dictionary",
        "description": "Fundamental.dictionary",
        "peekOfCode": "c = dict(zip(a,b))\nprint(c)\nprint(c[1])",
        "detail": "Fundamental.dictionary",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "Fundamental.dict_comprehensions",
        "description": "Fundamental.dict_comprehensions",
        "peekOfCode": "nums = list(range(0,11))\nresult = {i : \"Even\" if i%2==0 else \"odd\" for i in nums}\nprint(result)",
        "detail": "Fundamental.dict_comprehensions",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Fundamental.dict_comprehensions",
        "description": "Fundamental.dict_comprehensions",
        "peekOfCode": "result = {i : \"Even\" if i%2==0 else \"odd\" for i in nums}\nprint(result)",
        "detail": "Fundamental.dict_comprehensions",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Fundamental.findBig",
        "description": "Fundamental.findBig",
        "peekOfCode": "a = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\nc = int(input(\"Enter third number: \"))\nif a>b and a>c :\n    print(\"a is big number\")\nelif b>a and b>c :\n    print(\"b is big number\")\nelse:\n    print(\"c is big number\")",
        "detail": "Fundamental.findBig",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Fundamental.findBig",
        "description": "Fundamental.findBig",
        "peekOfCode": "b = int(input(\"Enter second number: \"))\nc = int(input(\"Enter third number: \"))\nif a>b and a>c :\n    print(\"a is big number\")\nelif b>a and b>c :\n    print(\"b is big number\")\nelse:\n    print(\"c is big number\")",
        "detail": "Fundamental.findBig",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "Fundamental.findBig",
        "description": "Fundamental.findBig",
        "peekOfCode": "c = int(input(\"Enter third number: \"))\nif a>b and a>c :\n    print(\"a is big number\")\nelif b>a and b>c :\n    print(\"b is big number\")\nelse:\n    print(\"c is big number\")",
        "detail": "Fundamental.findBig",
        "documentation": {}
    },
    {
        "label": "multiplication",
        "kind": 2,
        "importPath": "Fundamental.for_loop",
        "description": "Fundamental.for_loop",
        "peekOfCode": "def multiplication(n):\n    for i in range(1,11):\n        print(\"{} x {} = {}\".format(n,i,n*i))\nmultiplication(4)",
        "detail": "Fundamental.for_loop",
        "documentation": {}
    },
    {
        "label": "marks",
        "kind": 5,
        "importPath": "Fundamental.grade-point",
        "description": "Fundamental.grade-point",
        "peekOfCode": "marks = float(input(\"Enter a number\"))\nif marks >= 80 and marks <=100:\n        print(\"A+\")\nelif marks >= 70 and marks<80:\n        print(\"A\")\nelif marks >= 60 and marks<70:\n        print(\"A-\")\nelif marks >= 50 and marks <60:\n        print(\"B\")\nelif marks >= 40 and marks <50:",
        "detail": "Fundamental.grade-point",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Fundamental.if_else",
        "description": "Fundamental.if_else",
        "peekOfCode": "a = 20\nb = 33\nif a > b:\n  print(\"a is big number \" , a)\nelse:\n  print(\"b is  big number\" ,b)",
        "detail": "Fundamental.if_else",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Fundamental.if_else",
        "description": "Fundamental.if_else",
        "peekOfCode": "b = 33\nif a > b:\n  print(\"a is big number \" , a)\nelse:\n  print(\"b is  big number\" ,b)",
        "detail": "Fundamental.if_else",
        "documentation": {}
    },
    {
        "label": "year",
        "kind": 5,
        "importPath": "Fundamental.Leap-Year",
        "description": "Fundamental.Leap-Year",
        "peekOfCode": "year = input(\"Year : \")\nyear=int(year)\nif year % 4 == 0:\n    if year % 100== 0:\n        if year % 400 == 0:\n            print(year, \"is leap year\")\n        else:\n            print(year, \"is not leap year\")\n    else:\n        print(year, \"is  leap year\")",
        "detail": "Fundamental.Leap-Year",
        "documentation": {}
    },
    {
        "label": "li",
        "kind": 5,
        "importPath": "Fundamental.linear_search",
        "description": "Fundamental.linear_search",
        "peekOfCode": "li = [1,2,6,10,100,14,5,9]\n# found = li.index(5)\n# found = 5 in li\n# print(found)\n# key = 6 \n# flag= False\n# for item in li:\n#     if key==61:\n#         print(\"found\")\n#         flag=True",
        "detail": "Fundamental.linear_search",
        "documentation": {}
    },
    {
        "label": "list4",
        "kind": 5,
        "importPath": "Fundamental.list",
        "description": "Fundamental.list",
        "peekOfCode": "list4 = [\"shihab\",\"sabbir\",\"shoel\",\"shimul\",\"adnan\",\"shourab\"]\nprint(list4[4:1:-1]) #if start point not greater then end point in reverse time then it will nothing return",
        "detail": "Fundamental.list",
        "documentation": {}
    },
    {
        "label": "li",
        "kind": 5,
        "importPath": "Fundamental.list_comprehensions",
        "description": "Fundamental.list_comprehensions",
        "peekOfCode": "li = ['apple','banana','orange','mango']\nfruits = [x.capitalize() for x in li]\nprint(fruits)\nli_len= [len(x) for x in li]\nprint(li_len)\ncube_list = [x*x*x for x in range(1,11)]\nprint(cube_list)\ncube_list2 = [x*x*x for x in range(1,11) if x % 2==1]\nprint(cube_list2)\ncube_list3 = [x for x in range(1,11) if x % 2==1]",
        "detail": "Fundamental.list_comprehensions",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "Fundamental.list_comprehensions",
        "description": "Fundamental.list_comprehensions",
        "peekOfCode": "fruits = [x.capitalize() for x in li]\nprint(fruits)\nli_len= [len(x) for x in li]\nprint(li_len)\ncube_list = [x*x*x for x in range(1,11)]\nprint(cube_list)\ncube_list2 = [x*x*x for x in range(1,11) if x % 2==1]\nprint(cube_list2)\ncube_list3 = [x for x in range(1,11) if x % 2==1]\nprint(cube_list3)",
        "detail": "Fundamental.list_comprehensions",
        "documentation": {}
    },
    {
        "label": "cube_list",
        "kind": 5,
        "importPath": "Fundamental.list_comprehensions",
        "description": "Fundamental.list_comprehensions",
        "peekOfCode": "cube_list = [x*x*x for x in range(1,11)]\nprint(cube_list)\ncube_list2 = [x*x*x for x in range(1,11) if x % 2==1]\nprint(cube_list2)\ncube_list3 = [x for x in range(1,11) if x % 2==1]\nprint(cube_list3)\na = [1,10,23,24,26,90]\nresult = []\n# for i in a:\n#     if i % 2 == 0:",
        "detail": "Fundamental.list_comprehensions",
        "documentation": {}
    },
    {
        "label": "cube_list2",
        "kind": 5,
        "importPath": "Fundamental.list_comprehensions",
        "description": "Fundamental.list_comprehensions",
        "peekOfCode": "cube_list2 = [x*x*x for x in range(1,11) if x % 2==1]\nprint(cube_list2)\ncube_list3 = [x for x in range(1,11) if x % 2==1]\nprint(cube_list3)\na = [1,10,23,24,26,90]\nresult = []\n# for i in a:\n#     if i % 2 == 0:\n#         result.append(i)\n# print(result)",
        "detail": "Fundamental.list_comprehensions",
        "documentation": {}
    },
    {
        "label": "cube_list3",
        "kind": 5,
        "importPath": "Fundamental.list_comprehensions",
        "description": "Fundamental.list_comprehensions",
        "peekOfCode": "cube_list3 = [x for x in range(1,11) if x % 2==1]\nprint(cube_list3)\na = [1,10,23,24,26,90]\nresult = []\n# for i in a:\n#     if i % 2 == 0:\n#         result.append(i)\n# print(result)\n#list comprehension\nnew_result = [i for i in a if i %2==0]",
        "detail": "Fundamental.list_comprehensions",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Fundamental.list_comprehensions",
        "description": "Fundamental.list_comprehensions",
        "peekOfCode": "a = [1,10,23,24,26,90]\nresult = []\n# for i in a:\n#     if i % 2 == 0:\n#         result.append(i)\n# print(result)\n#list comprehension\nnew_result = [i for i in a if i %2==0]\nprint(new_result)\nb=[1,2,3,4,5]",
        "detail": "Fundamental.list_comprehensions",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Fundamental.list_comprehensions",
        "description": "Fundamental.list_comprehensions",
        "peekOfCode": "result = []\n# for i in a:\n#     if i % 2 == 0:\n#         result.append(i)\n# print(result)\n#list comprehension\nnew_result = [i for i in a if i %2==0]\nprint(new_result)\nb=[1,2,3,4,5]\nnew_b = [i**2 if i % 2==0 else i for i in b]",
        "detail": "Fundamental.list_comprehensions",
        "documentation": {}
    },
    {
        "label": "new_result",
        "kind": 5,
        "importPath": "Fundamental.list_comprehensions",
        "description": "Fundamental.list_comprehensions",
        "peekOfCode": "new_result = [i for i in a if i %2==0]\nprint(new_result)\nb=[1,2,3,4,5]\nnew_b = [i**2 if i % 2==0 else i for i in b]\nprint(new_b)",
        "detail": "Fundamental.list_comprehensions",
        "documentation": {}
    },
    {
        "label": "new_b",
        "kind": 5,
        "importPath": "Fundamental.list_comprehensions",
        "description": "Fundamental.list_comprehensions",
        "peekOfCode": "new_b = [i**2 if i % 2==0 else i for i in b]\nprint(new_b)",
        "detail": "Fundamental.list_comprehensions",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Fundamental.math_function",
        "description": "Fundamental.math_function",
        "peekOfCode": "a = 4.5\ny = 4.1\nprint(math.ceil(a))\nprint(math.ceil(y))\nprint(math.floor(a))\nprint(math.floor(y))\nb= 0.004\nprint(math.ceil(b))\nprint(math.floor(b))\n#Round ",
        "detail": "Fundamental.math_function",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Fundamental.math_function",
        "description": "Fundamental.math_function",
        "peekOfCode": "y = 4.1\nprint(math.ceil(a))\nprint(math.ceil(y))\nprint(math.floor(a))\nprint(math.floor(y))\nb= 0.004\nprint(math.ceil(b))\nprint(math.floor(b))\n#Round \ntax = 420.49 # .1 to .5 floor and .51 to .99 ceil",
        "detail": "Fundamental.math_function",
        "documentation": {}
    },
    {
        "label": "tax",
        "kind": 5,
        "importPath": "Fundamental.math_function",
        "description": "Fundamental.math_function",
        "peekOfCode": "tax = 420.49 # .1 to .5 floor and .51 to .99 ceil\nprint(round(tax))",
        "detail": "Fundamental.math_function",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": "Fundamental.max.min.sum",
        "description": "Fundamental.max.min.sum",
        "peekOfCode": "results = 0\nfor num in numbers:\n    results= results + num\nprint(results)",
        "detail": "Fundamental.max.min.sum",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "Fundamental.odd_even",
        "description": "Fundamental.odd_even",
        "peekOfCode": "number = int(input(\"enter a number\"))\nif number % 2 ==0 :\n    print(\"Number is even\")\nelse:\n    print(\"Number is odd\")",
        "detail": "Fundamental.odd_even",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "Fundamental.postive",
        "description": "Fundamental.postive",
        "peekOfCode": "number = int(input(\"Enter a number: \"))\nif number>0 :\n    print(\"Number is postive\")\nelif number<0 :\n    print(\"Number is negative\")\nelse :\n    print(\"number is Zero\")",
        "detail": "Fundamental.postive",
        "documentation": {}
    },
    {
        "label": "li",
        "kind": 5,
        "importPath": "Fundamental.range",
        "description": "Fundamental.range",
        "peekOfCode": "li = range(1,11)\nprint(type(li))\nfor x in li:\n    print(x)\nli2 = list(range(1,11))\nprint(li2)\neven_numbers= list(range(2,101,2))\nprint(even_numbers)\nnumbers= list(range(10))\nprint(numbers)",
        "detail": "Fundamental.range",
        "documentation": {}
    },
    {
        "label": "li2",
        "kind": 5,
        "importPath": "Fundamental.range",
        "description": "Fundamental.range",
        "peekOfCode": "li2 = list(range(1,11))\nprint(li2)\neven_numbers= list(range(2,101,2))\nprint(even_numbers)\nnumbers= list(range(10))\nprint(numbers)\nnegative2 = list(range(10,0,-1))\nprint(negative2)\nnegative = list(range(10,0,-5))\nprint(negative)",
        "detail": "Fundamental.range",
        "documentation": {}
    },
    {
        "label": "negative2",
        "kind": 5,
        "importPath": "Fundamental.range",
        "description": "Fundamental.range",
        "peekOfCode": "negative2 = list(range(10,0,-1))\nprint(negative2)\nnegative = list(range(10,0,-5))\nprint(negative)\nlist4=tuple(range(1,11,2))\nprint(list4)",
        "detail": "Fundamental.range",
        "documentation": {}
    },
    {
        "label": "negative",
        "kind": 5,
        "importPath": "Fundamental.range",
        "description": "Fundamental.range",
        "peekOfCode": "negative = list(range(10,0,-5))\nprint(negative)\nlist4=tuple(range(1,11,2))\nprint(list4)",
        "detail": "Fundamental.range",
        "documentation": {}
    },
    {
        "label": "outer",
        "kind": 2,
        "importPath": "Fundamental.scope_resolution",
        "description": "Fundamental.scope_resolution",
        "peekOfCode": "def outer():\n    n=\"enclosing\" #enclosing variable\n    def inner():\n         #this keyword only can change global variable\n        print(\"a\",n) #local variable\n    inner()\n    print(\"1\",n)\nouter()\n# n = 100  #global function\n# def outer():",
        "detail": "Fundamental.scope_resolution",
        "documentation": {}
    },
    {
        "label": "colors_choice",
        "kind": 5,
        "importPath": "Fundamental.set&dic_comprehenstions",
        "description": "Fundamental.set&dic_comprehenstions",
        "peekOfCode": "colors_choice = [('irfan','blue'),('shakib','green'),('hafeej','light'),('shodi','black'),('amla','deep_G')]\ncolors_dic={name:color for name,color in colors_choice}\nprint(colors_dic)\ncolors_set={color for color in colors_dic.values()}\ncolors_name={name for name in colors_dic.keys()}\nprint(colors_name)\nprint(colors_set)",
        "detail": "Fundamental.set&dic_comprehenstions",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "Fundamental.set",
        "description": "Fundamental.set",
        "peekOfCode": "s = set ()\ns.add(1)\ns.add(2)\ns.add(3)\ns.add(2)\nprint(s)\ns2=set()\ns2.add(4)\ns2.add(2)\ns2.add(5)",
        "detail": "Fundamental.set",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "Fundamental.stack&queue",
        "description": "Fundamental.stack&queue",
        "peekOfCode": "list1 = [\"bangla\"]\nlist1.append(\"english\")\nprint(list1)\nlist1.append(\"math\")\nlist1.append(\"SCIENCE\")\nlist1.pop()\nprint(list1)\n#queue fisrt in first out\nfrom collections import deque\nlist2 = deque([\"1\",\"2\",\"3\",\"4\"])",
        "detail": "Fundamental.stack&queue",
        "documentation": {}
    },
    {
        "label": "list2",
        "kind": 5,
        "importPath": "Fundamental.stack&queue",
        "description": "Fundamental.stack&queue",
        "peekOfCode": "list2 = deque([\"1\",\"2\",\"3\",\"4\"])\nlist2.popleft()\nlist2.popleft()\nlist2.popleft()\nlist2.popleft()\nprint(list2)\nif not list2:\n    print(\"No person left\")",
        "detail": "Fundamental.stack&queue",
        "documentation": {}
    },
    {
        "label": "first_number",
        "kind": 5,
        "importPath": "Fundamental.sum_avg",
        "description": "Fundamental.sum_avg",
        "peekOfCode": "first_number = float(input(\"Enter the first number: \"))\nsecond_number = float(input(\"Enter the second number: \"))\nthird_number = float(input(\"Enter the Third number: \"))\nresult = first_number + second_number + third_number\navg = result/3\nprint(\"The result is:\", result)\nprint(\"The average : \", avg)",
        "detail": "Fundamental.sum_avg",
        "documentation": {}
    },
    {
        "label": "second_number",
        "kind": 5,
        "importPath": "Fundamental.sum_avg",
        "description": "Fundamental.sum_avg",
        "peekOfCode": "second_number = float(input(\"Enter the second number: \"))\nthird_number = float(input(\"Enter the Third number: \"))\nresult = first_number + second_number + third_number\navg = result/3\nprint(\"The result is:\", result)\nprint(\"The average : \", avg)",
        "detail": "Fundamental.sum_avg",
        "documentation": {}
    },
    {
        "label": "third_number",
        "kind": 5,
        "importPath": "Fundamental.sum_avg",
        "description": "Fundamental.sum_avg",
        "peekOfCode": "third_number = float(input(\"Enter the Third number: \"))\nresult = first_number + second_number + third_number\navg = result/3\nprint(\"The result is:\", result)\nprint(\"The average : \", avg)",
        "detail": "Fundamental.sum_avg",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Fundamental.sum_avg",
        "description": "Fundamental.sum_avg",
        "peekOfCode": "result = first_number + second_number + third_number\navg = result/3\nprint(\"The result is:\", result)\nprint(\"The average : \", avg)",
        "detail": "Fundamental.sum_avg",
        "documentation": {}
    },
    {
        "label": "avg",
        "kind": 5,
        "importPath": "Fundamental.sum_avg",
        "description": "Fundamental.sum_avg",
        "peekOfCode": "avg = result/3\nprint(\"The result is:\", result)\nprint(\"The average : \", avg)",
        "detail": "Fundamental.sum_avg",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Fundamental.ternary",
        "description": "Fundamental.ternary",
        "peekOfCode": "a = int(input(\"Enter a Number\"))\nb = int(input(\"Enter another Number\"))\nmax_num = a if a>b else b\nprint(\"Max number is = \", max_num)",
        "detail": "Fundamental.ternary",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Fundamental.ternary",
        "description": "Fundamental.ternary",
        "peekOfCode": "b = int(input(\"Enter another Number\"))\nmax_num = a if a>b else b\nprint(\"Max number is = \", max_num)",
        "detail": "Fundamental.ternary",
        "documentation": {}
    },
    {
        "label": "max_num",
        "kind": 5,
        "importPath": "Fundamental.ternary",
        "description": "Fundamental.ternary",
        "peekOfCode": "max_num = a if a>b else b\nprint(\"Max number is = \", max_num)",
        "detail": "Fundamental.ternary",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Fundamental.Tuple",
        "description": "Fundamental.Tuple",
        "peekOfCode": "t = tuple(reversed(t))\nprint(t)",
        "detail": "Fundamental.Tuple",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Fundamental.variable",
        "description": "Fundamental.variable",
        "peekOfCode": "a = 18//4\nprint(a)# integer division\nprint(float(a))#convert into float\nb=10/5\nprint(b)# float division\nprint(int(b))#convert into integer\nx=18\ny=4\nmax = x if x<y else y\nprint(max)",
        "detail": "Fundamental.variable",
        "documentation": {}
    },
    {
        "label": "max",
        "kind": 5,
        "importPath": "Fundamental.variable",
        "description": "Fundamental.variable",
        "peekOfCode": "max = x if x<y else y\nprint(max)",
        "detail": "Fundamental.variable",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Fundamental.while_loop",
        "description": "Fundamental.while_loop",
        "peekOfCode": "a = 3\nwhile a<=21:\n  if a == 15:\n    break\n  print(a)\n  a = a+3\nprint(\"Done\")",
        "detail": "Fundamental.while_loop",
        "documentation": {}
    },
    {
        "label": "bill_payment_Day",
        "kind": 5,
        "importPath": "Module.datetime",
        "description": "Module.datetime",
        "peekOfCode": "bill_payment_Day = today + timedelta(days=5, hours=2, minutes=20)\nprint(bill_payment_Day)\nbill_payment_Day = today - timedelta(days=3 , seconds=50)\nprint(bill_payment_Day)",
        "detail": "Module.datetime",
        "documentation": {}
    },
    {
        "label": "bill_payment_Day",
        "kind": 5,
        "importPath": "Module.datetime",
        "description": "Module.datetime",
        "peekOfCode": "bill_payment_Day = today - timedelta(days=3 , seconds=50)\nprint(bill_payment_Day)",
        "detail": "Module.datetime",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "Python(OOP).Method.classmethod_as_multiple_constructor",
        "description": "Python(OOP).Method.classmethod_as_multiple_constructor",
        "peekOfCode": "class Car:\n    def __init__(self, name, brand):\n        self.name = name\n        self.brand = brand\n    @classmethod\n    def default_car(cls):\n        print(\"sk\")  # This will print when using the default constructor\n        return cls(name=\"sk\", brand=\"\")\n    @classmethod\n    def named_car(cls, name, brand):",
        "detail": "Python(OOP).Method.classmethod_as_multiple_constructor",
        "documentation": {}
    },
    {
        "label": "car1",
        "kind": 5,
        "importPath": "Python(OOP).Method.classmethod_as_multiple_constructor",
        "description": "Python(OOP).Method.classmethod_as_multiple_constructor",
        "peekOfCode": "car1 = Car.named_car(\"apache\", \"sujuki\")\nprint(car1.name, car1.brand)\n# Default constructor\ncar2 = Car.default_car()\nprint(car2.name, car2.brand)\n# Another default\ncar3 = Car.default_car()\nprint(car3.name)",
        "detail": "Python(OOP).Method.classmethod_as_multiple_constructor",
        "documentation": {}
    },
    {
        "label": "car2",
        "kind": 5,
        "importPath": "Python(OOP).Method.classmethod_as_multiple_constructor",
        "description": "Python(OOP).Method.classmethod_as_multiple_constructor",
        "peekOfCode": "car2 = Car.default_car()\nprint(car2.name, car2.brand)\n# Another default\ncar3 = Car.default_car()\nprint(car3.name)",
        "detail": "Python(OOP).Method.classmethod_as_multiple_constructor",
        "documentation": {}
    },
    {
        "label": "car3",
        "kind": 5,
        "importPath": "Python(OOP).Method.classmethod_as_multiple_constructor",
        "description": "Python(OOP).Method.classmethod_as_multiple_constructor",
        "peekOfCode": "car3 = Car.default_car()\nprint(car3.name)",
        "detail": "Python(OOP).Method.classmethod_as_multiple_constructor",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "Python(OOP).Method.class_method",
        "description": "Python(OOP).Method.class_method",
        "peekOfCode": "class Product:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n    @classmethod\n    def from_dict(cls, data):\n        name, price = data.split(',')\n        return cls(name,price)\np = Product.from_dict(\"keya,20\")\nprint(p.name) # Output: Shampoo",
        "detail": "Python(OOP).Method.class_method",
        "documentation": {}
    },
    {
        "label": "Book",
        "kind": 6,
        "importPath": "Python(OOP).Method.class_method",
        "description": "Python(OOP).Method.class_method",
        "peekOfCode": "class Book:\n    def __init__(self,title,author):\n        self.title= title\n        self.author= author\n    @classmethod\n    def from_string(cls,data):\n        title, author = data.split(',')\n        return cls(title,author)\nb = Book.from_string(\"Harry Potter, J.K. Rowling\")\nprint(b.title)",
        "detail": "Python(OOP).Method.class_method",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "Python(OOP).Method.class_method",
        "description": "Python(OOP).Method.class_method",
        "peekOfCode": "p = Product.from_dict(\"keya,20\")\nprint(p.name) # Output: Shampoo\nprint(p.price)  # Output: 120\n# একটি Book ক্লাস বানাও, যাতে from_string নামে একটি classmethod থাকে। ইনপুট হবে: \"Harry Potter, J.K. Rowling\"\n# তুমি split করে title ও author বের করবে এবং সেই অনুযায়ী object তৈরি করবে\nclass Book:\n    def __init__(self,title,author):\n        self.title= title\n        self.author= author\n    @classmethod",
        "detail": "Python(OOP).Method.class_method",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Python(OOP).Method.class_method",
        "description": "Python(OOP).Method.class_method",
        "peekOfCode": "b = Book.from_string(\"Harry Potter, J.K. Rowling\")\nprint(b.title)",
        "detail": "Python(OOP).Method.class_method",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "Python(OOP).Method.factory_method",
        "description": "Python(OOP).Method.factory_method",
        "peekOfCode": "class Product:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    @classmethod\n    def from_dict(cls, data):     # ← 🔸 This is the factory method\n        name, age = data.split(',')\n        return cls(name, int(age))  # ← Creates and returns a Product object\np = Product.from_dict(\"keya,28\")  # ← 🔸 Using the factory method\nprint(p.name)",
        "detail": "Python(OOP).Method.factory_method",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "Python(OOP).Method.factory_method",
        "description": "Python(OOP).Method.factory_method",
        "peekOfCode": "p = Product.from_dict(\"keya,28\")  # ← 🔸 Using the factory method\nprint(p.name)\nprint(p.age)",
        "detail": "Python(OOP).Method.factory_method",
        "documentation": {}
    },
    {
        "label": "Course",
        "kind": 6,
        "importPath": "Python(OOP).aggregation",
        "description": "Python(OOP).aggregation",
        "peekOfCode": "class Course:\n    def __init__(self,title):\n        self.title= title\nclass Student:\n    def __init__(self,name):\n        self.name = name\n        self.course = []\n    def enroll(self,course):\n        self.course.append(course) #aggregation has a relationship \n    def enroll_shows(self):",
        "detail": "Python(OOP).aggregation",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "Python(OOP).aggregation",
        "description": "Python(OOP).aggregation",
        "peekOfCode": "class Student:\n    def __init__(self,name):\n        self.name = name\n        self.course = []\n    def enroll(self,course):\n        self.course.append(course) #aggregation has a relationship \n    def enroll_shows(self):\n        for course in self.course:\n            print(f\"{self.name}  enrolled  in {course.title}\")\nc1 = Course(\"C\")",
        "detail": "Python(OOP).aggregation",
        "documentation": {}
    },
    {
        "label": "c1",
        "kind": 5,
        "importPath": "Python(OOP).aggregation",
        "description": "Python(OOP).aggregation",
        "peekOfCode": "c1 = Course(\"C\")\nc2 = Course(\"C++\")\nc3 = Course(\"python\")\nstu= Student(\"shahadat\")\nstu.enroll(c1)\nstu.enroll(c2)\nstu.enroll(c3)\nstu.enroll_shows()",
        "detail": "Python(OOP).aggregation",
        "documentation": {}
    },
    {
        "label": "c2",
        "kind": 5,
        "importPath": "Python(OOP).aggregation",
        "description": "Python(OOP).aggregation",
        "peekOfCode": "c2 = Course(\"C++\")\nc3 = Course(\"python\")\nstu= Student(\"shahadat\")\nstu.enroll(c1)\nstu.enroll(c2)\nstu.enroll(c3)\nstu.enroll_shows()",
        "detail": "Python(OOP).aggregation",
        "documentation": {}
    },
    {
        "label": "c3",
        "kind": 5,
        "importPath": "Python(OOP).aggregation",
        "description": "Python(OOP).aggregation",
        "peekOfCode": "c3 = Course(\"python\")\nstu= Student(\"shahadat\")\nstu.enroll(c1)\nstu.enroll(c2)\nstu.enroll(c3)\nstu.enroll_shows()",
        "detail": "Python(OOP).aggregation",
        "documentation": {}
    },
    {
        "label": "Team",
        "kind": 6,
        "importPath": "Python(OOP).association",
        "description": "Python(OOP).association",
        "peekOfCode": "class Team:\n    def __init__(self,name):\n        self.team= name\n    def assign_player(self, player):\n        print(f\"{player.name} is playing for {self.team}\")\nclass Player:\n    def __init__(self,name):\n        self.name= name\np = Player(\"shahadat\")\nt = Team(\"Dhaka\")",
        "detail": "Python(OOP).association",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "Python(OOP).association",
        "description": "Python(OOP).association",
        "peekOfCode": "class Player:\n    def __init__(self,name):\n        self.name= name\np = Player(\"shahadat\")\nt = Team(\"Dhaka\")\nt.assign_player(p)",
        "detail": "Python(OOP).association",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "Python(OOP).association",
        "description": "Python(OOP).association",
        "peekOfCode": "p = Player(\"shahadat\")\nt = Team(\"Dhaka\")\nt.assign_player(p)",
        "detail": "Python(OOP).association",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Python(OOP).association",
        "description": "Python(OOP).association",
        "peekOfCode": "t = Team(\"Dhaka\")\nt.assign_player(p)",
        "detail": "Python(OOP).association",
        "documentation": {}
    },
    {
        "label": "Fractio",
        "kind": 6,
        "importPath": "Python(OOP).class&object",
        "description": "Python(OOP).class&object",
        "peekOfCode": "class Fraction :\n    def __init__(self,n,d):\n        self.numerator = n\n        self.denominator = d\n    def add(self,f):\n        l= math.lcm(self.denominator,f.denominator)\n        num=(l/self.denominator)*self.numerator + (l/f.denominator)*f.numerator\n        self.numerator=int(num)\n        self.denominator=l\n    def __str__(self):",
        "detail": "Python(OOP).class&object",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "Python(OOP).class2",
        "description": "Python(OOP).class2",
        "peekOfCode": "class Students :\n    def __init__(self,roll,gpa):\n        self.gender= \"male\".capitalize()\n        self.city = \"dhaka\".capitalize()\n        self.Roll= roll\n        self.Gpa= gpa\n         #it print  instance from __str__ method what i choose\n    #noramally without str it runs __repr__ and it represents objects address\n    #str override __repr__ \n    def __str__(self):",
        "detail": "Python(OOP).class2",
        "documentation": {}
    },
    {
        "label": "Students",
        "kind": 6,
        "importPath": "Python(OOP).class_Object",
        "description": "Python(OOP).class_Object",
        "peekOfCode": "class Students:\n    Roll = \"\"\n    Gpa = \"\"\nshihab= Students()\n# print(isinstance(shihab,Students))#is object created ? true\nshihab.Roll=1\nshihab.Gpa= 5\nSabbir= Students()\nSabbir.Roll = 2\nSabbir.Gpa = 4.75",
        "detail": "Python(OOP).class_Object",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "Python(OOP).class_Object",
        "description": "Python(OOP).class_Object",
        "peekOfCode": "class Car:\n    def __init__(self):\n        self.model=\"\"\n        self.brand = \"\"\ncar1 = Car()\ncar1.brand=\"corrola\"\ncar1.model=\"toyota\"\nprint(car1.model,car1.brand)",
        "detail": "Python(OOP).class_Object",
        "documentation": {}
    },
    {
        "label": "Sabbir.Roll",
        "kind": 5,
        "importPath": "Python(OOP).class_Object",
        "description": "Python(OOP).class_Object",
        "peekOfCode": "Sabbir.Roll = 2\nSabbir.Gpa = 4.75\nshimul= Students()\nshimul.Roll = 4\nshimul.Gpa = 4.5\nprint(shihab.Gpa)\nclass Car:\n    def __init__(self):\n        self.model=\"\"\n        self.brand = \"\"",
        "detail": "Python(OOP).class_Object",
        "documentation": {}
    },
    {
        "label": "Sabbir.Gpa",
        "kind": 5,
        "importPath": "Python(OOP).class_Object",
        "description": "Python(OOP).class_Object",
        "peekOfCode": "Sabbir.Gpa = 4.75\nshimul= Students()\nshimul.Roll = 4\nshimul.Gpa = 4.5\nprint(shihab.Gpa)\nclass Car:\n    def __init__(self):\n        self.model=\"\"\n        self.brand = \"\"\ncar1 = Car()",
        "detail": "Python(OOP).class_Object",
        "documentation": {}
    },
    {
        "label": "shimul.Roll",
        "kind": 5,
        "importPath": "Python(OOP).class_Object",
        "description": "Python(OOP).class_Object",
        "peekOfCode": "shimul.Roll = 4\nshimul.Gpa = 4.5\nprint(shihab.Gpa)\nclass Car:\n    def __init__(self):\n        self.model=\"\"\n        self.brand = \"\"\ncar1 = Car()\ncar1.brand=\"corrola\"\ncar1.model=\"toyota\"",
        "detail": "Python(OOP).class_Object",
        "documentation": {}
    },
    {
        "label": "shimul.Gpa",
        "kind": 5,
        "importPath": "Python(OOP).class_Object",
        "description": "Python(OOP).class_Object",
        "peekOfCode": "shimul.Gpa = 4.5\nprint(shihab.Gpa)\nclass Car:\n    def __init__(self):\n        self.model=\"\"\n        self.brand = \"\"\ncar1 = Car()\ncar1.brand=\"corrola\"\ncar1.model=\"toyota\"\nprint(car1.model,car1.brand)",
        "detail": "Python(OOP).class_Object",
        "documentation": {}
    },
    {
        "label": "car1",
        "kind": 5,
        "importPath": "Python(OOP).class_Object",
        "description": "Python(OOP).class_Object",
        "peekOfCode": "car1 = Car()\ncar1.brand=\"corrola\"\ncar1.model=\"toyota\"\nprint(car1.model,car1.brand)",
        "detail": "Python(OOP).class_Object",
        "documentation": {}
    },
    {
        "label": "Studen",
        "kind": 6,
        "importPath": "Python(OOP).constructor",
        "description": "Python(OOP).constructor",
        "peekOfCode": "class Student :\n    def __init__(self,a,b):# constructor function/method\n        self.roll= a\n        self.gpa= b\n        self.area= self.roll * self.gpa\n    def __str__(self):\n        return \"Area : {}\".format(self.area)\nresult1= Student(10,20)\nresult2= Student(100,200)\nprint(result1)",
        "detail": "Python(OOP).constructor",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "Python(OOP).object",
        "description": "Python(OOP).object",
        "peekOfCode": "class Car:\n    make='toyota'\n    def __init__(self,mk,mdl,yr):\n        self.make= mk\n        self.model=mdl\n        self.year=yr\n    def __str__(self):\n        return f\"{self.make} {self.model} {self.year}\"\n    def move(self):\n        print(\"the car is moving\")",
        "detail": "Python(OOP).object",
        "documentation": {}
    },
    {
        "label": "another_car",
        "kind": 5,
        "importPath": "Python(OOP).object",
        "description": "Python(OOP).object",
        "peekOfCode": "another_car = Car('Toyota','Camry', 2020)\nanother_car.move()\nprint(mycar.make,another_car.make)\nprint(mycar)",
        "detail": "Python(OOP).object",
        "documentation": {}
    },
    {
        "label": "Shape",
        "kind": 6,
        "importPath": "Python(OOP).polymorphysm",
        "description": "Python(OOP).polymorphysm",
        "peekOfCode": "class Shape:\n    def area(self,a,b=10):\n        return a*b\nc = Shape()\nc.area(10)\nprint(c.area(12,12))",
        "detail": "Python(OOP).polymorphysm",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "Python(OOP).polymorphysm",
        "description": "Python(OOP).polymorphysm",
        "peekOfCode": "c = Shape()\nc.area(10)\nprint(c.area(12,12))",
        "detail": "Python(OOP).polymorphysm",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "Python(OOP).Static_method",
        "description": "Python(OOP).Static_method",
        "peekOfCode": "class Car:\n    @classmethod\n    def drive(cls):\n        print(\"He is driving a Car\")\n    def engine(self):\n        print(\"Starting the engine\")\n    @staticmethod\n    def engine1():\n        print(\"Starting the autoengine\") #static method did not use any variable or call any function\nCar.drive()",
        "detail": "Python(OOP).Static_method",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "String.stack&queue",
        "description": "String.stack&queue",
        "peekOfCode": "list1 = [\"bangla\"]\nlist1.append(\"english\")\nprint(list1)\nlist1.append(\"math\")\nlist1.append(\"SCIENCE\")\nlist1.pop()\nprint(list1)\n#queue fisrt in first out\nfrom collections import deque\nlist2 = deque([\"1\",\"2\",\"3\",\"4\"])",
        "detail": "String.stack&queue",
        "documentation": {}
    },
    {
        "label": "list2",
        "kind": 5,
        "importPath": "String.stack&queue",
        "description": "String.stack&queue",
        "peekOfCode": "list2 = deque([\"1\",\"2\",\"3\",\"4\"])\nlist2.popleft()\nlist2.popleft()\nlist2.popleft()\nlist2.popleft()\nprint(list2)\nif not list2:\n    print(\"No person left\")",
        "detail": "String.stack&queue",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "String.string_concat",
        "description": "String.string_concat",
        "peekOfCode": "a = 'sabil'\nb = \"mia\"\nc = a + b\nprint(c)\nstrings = \"This is a string\"\nprint(strings.split())",
        "detail": "String.string_concat",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "String.string_concat",
        "description": "String.string_concat",
        "peekOfCode": "b = \"mia\"\nc = a + b\nprint(c)\nstrings = \"This is a string\"\nprint(strings.split())",
        "detail": "String.string_concat",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "String.string_concat",
        "description": "String.string_concat",
        "peekOfCode": "c = a + b\nprint(c)\nstrings = \"This is a string\"\nprint(strings.split())",
        "detail": "String.string_concat",
        "documentation": {}
    },
    {
        "label": "strings",
        "kind": 5,
        "importPath": "String.string_concat",
        "description": "String.string_concat",
        "peekOfCode": "strings = \"This is a string\"\nprint(strings.split())",
        "detail": "String.string_concat",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "String.string_formatting",
        "description": "String.string_formatting",
        "peekOfCode": "age = 25\nf_name = \"rahim\"\nl_name= \"khan\"\n# txt = \"i am {f_name} {l_name}. i am {age} years old.\".format(l_name=l_name,f_name=f_name,age=age)\ntxt = \"I am {} {}.I am {} years old.\".format(f_name,l_name,age)# long step\ntx2 = f\"i am {f_name} {l_name}.I am {age} years old.\"#short step\nprint(txt)\nprint(tx2)",
        "detail": "String.string_formatting",
        "documentation": {}
    },
    {
        "label": "f_name",
        "kind": 5,
        "importPath": "String.string_formatting",
        "description": "String.string_formatting",
        "peekOfCode": "f_name = \"rahim\"\nl_name= \"khan\"\n# txt = \"i am {f_name} {l_name}. i am {age} years old.\".format(l_name=l_name,f_name=f_name,age=age)\ntxt = \"I am {} {}.I am {} years old.\".format(f_name,l_name,age)# long step\ntx2 = f\"i am {f_name} {l_name}.I am {age} years old.\"#short step\nprint(txt)\nprint(tx2)",
        "detail": "String.string_formatting",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "String.string_formatting",
        "description": "String.string_formatting",
        "peekOfCode": "txt = \"I am {} {}.I am {} years old.\".format(f_name,l_name,age)# long step\ntx2 = f\"i am {f_name} {l_name}.I am {age} years old.\"#short step\nprint(txt)\nprint(tx2)",
        "detail": "String.string_formatting",
        "documentation": {}
    },
    {
        "label": "tx2",
        "kind": 5,
        "importPath": "String.string_formatting",
        "description": "String.string_formatting",
        "peekOfCode": "tx2 = f\"i am {f_name} {l_name}.I am {age} years old.\"#short step\nprint(txt)\nprint(tx2)",
        "detail": "String.string_formatting",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "String.string_index_immutable",
        "description": "String.string_index_immutable",
        "peekOfCode": "a = \"this is string\"\nprint(a[0])\nprint(a[13])\n# print(a[16])\n#toatal index = total len - 1\nprint(len(a))\nprint(a[len(a)-1]) #last character print long method\nprint(a[-1]) #last character print short method \nprint(a[-2]) #last 2nd character print short method\n#immutable data type",
        "detail": "String.string_index_immutable",
        "documentation": {}
    },
    {
        "label": "b[1]",
        "kind": 5,
        "importPath": "String.string_index_immutable",
        "description": "String.string_index_immutable",
        "peekOfCode": "b[1] = 'o' #TypeError: 'str' object does not support item assignment\nprint(b)",
        "detail": "String.string_index_immutable",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "String.string_methods",
        "description": "String.string_methods",
        "peekOfCode": "txt = \"i like bananas\"\nx=txt.replace(\"bananas\",\"apples\")\nprint(x)\nprint(x.count('a'))",
        "detail": "String.string_methods",
        "documentation": {}
    }
]