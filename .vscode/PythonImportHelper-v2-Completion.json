[
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "area",
        "description": "area",
        "peekOfCode": "base = float(input(\"Enter base: \"))\nheight = float(input(\"Enter height: \"))\nradius = float(input(\"Enter radius: \"))\nTriangle_area = 0.5 * base * height\nCircle_area = 3.1416 * radius * radius\nprint(\"Area of Triangle :\", Triangle_area)\nprint(\"Area of Circle\", Circle_area)",
        "detail": "area",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "area",
        "description": "area",
        "peekOfCode": "height = float(input(\"Enter height: \"))\nradius = float(input(\"Enter radius: \"))\nTriangle_area = 0.5 * base * height\nCircle_area = 3.1416 * radius * radius\nprint(\"Area of Triangle :\", Triangle_area)\nprint(\"Area of Circle\", Circle_area)",
        "detail": "area",
        "documentation": {}
    },
    {
        "label": "radius",
        "kind": 5,
        "importPath": "area",
        "description": "area",
        "peekOfCode": "radius = float(input(\"Enter radius: \"))\nTriangle_area = 0.5 * base * height\nCircle_area = 3.1416 * radius * radius\nprint(\"Area of Triangle :\", Triangle_area)\nprint(\"Area of Circle\", Circle_area)",
        "detail": "area",
        "documentation": {}
    },
    {
        "label": "Triangle_area",
        "kind": 5,
        "importPath": "area",
        "description": "area",
        "peekOfCode": "Triangle_area = 0.5 * base * height\nCircle_area = 3.1416 * radius * radius\nprint(\"Area of Triangle :\", Triangle_area)\nprint(\"Area of Circle\", Circle_area)",
        "detail": "area",
        "documentation": {}
    },
    {
        "label": "Circle_area",
        "kind": 5,
        "importPath": "area",
        "description": "area",
        "peekOfCode": "Circle_area = 3.1416 * radius * radius\nprint(\"Area of Triangle :\", Triangle_area)\nprint(\"Area of Circle\", Circle_area)",
        "detail": "area",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "data-type",
        "description": "data-type",
        "peekOfCode": "x = 5\ny = 6.6\nz = \"sabil\"\nn1=6\nn2=2\nn3=n1**n2\nprint(n3)\nn1=4\nprint(n3)\nn3=n1**n2",
        "detail": "data-type",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "data-type",
        "description": "data-type",
        "peekOfCode": "y = 6.6\nz = \"sabil\"\nn1=6\nn2=2\nn3=n1**n2\nprint(n3)\nn1=4\nprint(n3)\nn3=n1**n2\nprint(n3)",
        "detail": "data-type",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "data-type",
        "description": "data-type",
        "peekOfCode": "z = \"sabil\"\nn1=6\nn2=2\nn3=n1**n2\nprint(n3)\nn1=4\nprint(n3)\nn3=n1**n2\nprint(n3)\nprint(x)",
        "detail": "data-type",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "findBig",
        "description": "findBig",
        "peekOfCode": "a = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\nc = int(input(\"Enter third number: \"))\nif a>b and a>c :\n    print(\"a is big number\")\nelif b>a and b>c :\n    print(\"b is big number\")\nelse:\n    print(\"c is big number\")",
        "detail": "findBig",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "findBig",
        "description": "findBig",
        "peekOfCode": "b = int(input(\"Enter second number: \"))\nc = int(input(\"Enter third number: \"))\nif a>b and a>c :\n    print(\"a is big number\")\nelif b>a and b>c :\n    print(\"b is big number\")\nelse:\n    print(\"c is big number\")",
        "detail": "findBig",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "findBig",
        "description": "findBig",
        "peekOfCode": "c = int(input(\"Enter third number: \"))\nif a>b and a>c :\n    print(\"a is big number\")\nelif b>a and b>c :\n    print(\"b is big number\")\nelse:\n    print(\"c is big number\")",
        "detail": "findBig",
        "documentation": {}
    },
    {
        "label": "multiplication",
        "kind": 2,
        "importPath": "for_loop",
        "description": "for_loop",
        "peekOfCode": "def multiplication(n):\n    for i in range(1,11):\n        print(\"{} x {} = {}\".format(n,i,n*i))\nmultiplication(3)",
        "detail": "for_loop",
        "documentation": {}
    },
    {
        "label": "generate_multiplication_table",
        "kind": 2,
        "importPath": "function",
        "description": "function",
        "peekOfCode": "def generate_multiplication_table(n):\n    print(n,\"x 1 =\",n*1)\n    print(n,\"x 1 =\",n*2)\n    print(n,\"x 1 =\",n*3)\n    print(n,\"x 1 =\",n*4)\n    print(n,\"x 1 =\",n*5)\n    print(n,\"x 1 =\",n*6)\n    print(n,\"x 1 =\",n*7)\n    print(n,\"x 1 =\",n*8)\n    print(n,\"x 1 =\",n*9)",
        "detail": "function",
        "documentation": {}
    },
    {
        "label": "marks",
        "kind": 5,
        "importPath": "grade-point",
        "description": "grade-point",
        "peekOfCode": "marks = float(input(\"Enter a number\"))\nif marks >= 80 and marks <=100:\n        print(\"A+\")\nelif marks >= 70 and marks<80:\n        print(\"A\")\nelif marks >= 60 and marks<70:\n        print(\"A-\")\nelif marks >= 50 and marks <60:\n        print(\"B\")\nelif marks >= 40 and marks <50:",
        "detail": "grade-point",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "if_else",
        "description": "if_else",
        "peekOfCode": "a = 20\nb = 33\nif a > b:\n  print(\"a is big number \" , a)\nelse:\n  print(\"b is  big number\" ,b)",
        "detail": "if_else",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "if_else",
        "description": "if_else",
        "peekOfCode": "b = 33\nif a > b:\n  print(\"a is big number \" , a)\nelse:\n  print(\"b is  big number\" ,b)",
        "detail": "if_else",
        "documentation": {}
    },
    {
        "label": "year",
        "kind": 5,
        "importPath": "Leap-Year",
        "description": "Leap-Year",
        "peekOfCode": "year = input(\"Year : \")\nyear=int(year)\nif year % 4 == 0:\n    if year % 100== 0:\n        if year % 400 == 0:\n            print(year, \"is leap year\")\n        else:\n            print(year, \"is not leap year\")\n    else:\n        print(year, \"is  leap year\")",
        "detail": "Leap-Year",
        "documentation": {}
    },
    {
        "label": "Today",
        "kind": 5,
        "importPath": "library_func",
        "description": "library_func",
        "peekOfCode": "Today = datetime.datetime.today()\nprint(Today)",
        "detail": "library_func",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "odd_even",
        "description": "odd_even",
        "peekOfCode": "number = int(input(\"enter a number\"))\nif number % 2 ==0 :\n    print(\"Number is even\")\nelse:\n    print(\"Number is odd\")",
        "detail": "odd_even",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "postive",
        "description": "postive",
        "peekOfCode": "number = int(input(\"Enter a number: \"))\nif number>0 :\n    print(\"Number is postive\")\nelif number<0 :\n    print(\"Number is negative\")\nelse :\n    print(\"number is Zero\")",
        "detail": "postive",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "set",
        "description": "set",
        "peekOfCode": "s = set ()\ns.add(1)\ns.add(2)\ns.add(3)\nprint(s)\ns2=set()\ns2.add(4)\ns2.add(2)\ns2.add(5)\ns2.add(6)",
        "detail": "set",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "string_concat",
        "description": "string_concat",
        "peekOfCode": "a = 'sabil'\nb = \"mia\"\nc = a + b\nprint(c)",
        "detail": "string_concat",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "string_concat",
        "description": "string_concat",
        "peekOfCode": "b = \"mia\"\nc = a + b\nprint(c)",
        "detail": "string_concat",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "string_concat",
        "description": "string_concat",
        "peekOfCode": "c = a + b\nprint(c)",
        "detail": "string_concat",
        "documentation": {}
    },
    {
        "label": "first_number",
        "kind": 5,
        "importPath": "sum_avg",
        "description": "sum_avg",
        "peekOfCode": "first_number = float(input(\"Enter the first number: \"))\nsecond_number = float(input(\"Enter the second number: \"))\nthird_number = float(input(\"Enter the Third number: \"))\nresult = first_number + second_number + third_number\navg = result/3\nprint(\"The result is:\", result)\nprint(\"The average : \", avg)",
        "detail": "sum_avg",
        "documentation": {}
    },
    {
        "label": "second_number",
        "kind": 5,
        "importPath": "sum_avg",
        "description": "sum_avg",
        "peekOfCode": "second_number = float(input(\"Enter the second number: \"))\nthird_number = float(input(\"Enter the Third number: \"))\nresult = first_number + second_number + third_number\navg = result/3\nprint(\"The result is:\", result)\nprint(\"The average : \", avg)",
        "detail": "sum_avg",
        "documentation": {}
    },
    {
        "label": "third_number",
        "kind": 5,
        "importPath": "sum_avg",
        "description": "sum_avg",
        "peekOfCode": "third_number = float(input(\"Enter the Third number: \"))\nresult = first_number + second_number + third_number\navg = result/3\nprint(\"The result is:\", result)\nprint(\"The average : \", avg)",
        "detail": "sum_avg",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "sum_avg",
        "description": "sum_avg",
        "peekOfCode": "result = first_number + second_number + third_number\navg = result/3\nprint(\"The result is:\", result)\nprint(\"The average : \", avg)",
        "detail": "sum_avg",
        "documentation": {}
    },
    {
        "label": "avg",
        "kind": 5,
        "importPath": "sum_avg",
        "description": "sum_avg",
        "peekOfCode": "avg = result/3\nprint(\"The result is:\", result)\nprint(\"The average : \", avg)",
        "detail": "sum_avg",
        "documentation": {}
    },
    {
        "label": "multiplication",
        "kind": 2,
        "importPath": "while_loop",
        "description": "while_loop",
        "peekOfCode": "def multiplication(n):\n    for i in range(1,11):\n        print(\"{} x {} = {}\".format(n,i,n*i))\nn= input(\"enter a number\")\nn=int(n)\nwhile n!=0:\n  multiplication(n)\n  print(\" \")\n  n=input(\"enter a number\")\n  n=int(n)",
        "detail": "while_loop",
        "documentation": {}
    }
]